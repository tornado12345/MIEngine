<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticationFailureDescription" xml:space="preserve">
    <value>Connecting to the remote system failed due to authentication failure. Enter your updated connection info and try connecting again.</value>
  </data>
  <data name="AuthenticationFailureHeader" xml:space="preserve">
    <value>Authentication Failure</value>
  </data>
  <data name="CommandFailedMessageFormat" xml:space="preserve">
    <value>"Command '{0}' failed with code '{1}'. {2}"</value>
    <comment>{0} = command that was run
{1} = exit code
{2} = optional output</comment>
  </data>
  <data name="CopyFile_TempFilePrefix" xml:space="preserve">
    <value>Microsoft-SSHPortSupplier-FileCopy-</value>
    <comment>Do Not localize</comment>
  </data>
  <data name="Docker_PSDescription" xml:space="preserve">
    <value>The Docker (Linux Container) connection type allows Visual Studio to connect to Docker containers running locally or remotely (using SSH).</value>
  </data>
  <data name="Docker_PSName" xml:space="preserve">
    <value>Docker (Linux Container)</value>
  </data>
  <data name="Error_CommandFailed" xml:space="preserve">
    <value>Command failed to execute</value>
  </data>
  <data name="Error_ContainerConnectionStringInvalidMessage" xml:space="preserve">
    <value>The connection string provided is not formatted properly.</value>
  </data>
  <data name="Error_ContainerConnectionStringInvalidTitle" xml:space="preserve">
    <value>Connection string format invalid.</value>
  </data>
  <data name="Error_ContainerUnavailableMessage" xml:space="preserve">
    <value>Container '{0}' is not in the list of running containers.</value>
    <comment>{0} = name of the virtualized container</comment>
  </data>
  <data name="Error_ContainerUnavailableTitle" xml:space="preserve">
    <value>Container unavailable.</value>
  </data>
  <data name="Error_CopyFileFailed" xml:space="preserve">
    <value>Failed to copy files.</value>
  </data>
  <data name="Error_CopyFile_SourceNotFound" xml:space="preserve">
    <value>Source file '{0}' not found.</value>
    <comment>{0} = source file name</comment>
  </data>
  <data name="Error_EnsureDockerContainerIsLinux" xml:space="preserve">
    <value>Ensure the selected Docker Connection target is a Linux container.</value>
  </data>
  <data name="Error_DockerPSParseFailed" xml:space="preserve">
    <value>Failed to parse json '{0}'.\r\nError: '{1}'</value>
    <comment>{0} is a json output item from the output 'docker ps' and {1} is the error message</comment>
  </data>
  <data name="Error_ExitCodeNotParseable" xml:space="preserve">
    <value>Unable to parse exit code.</value>
  </data>
  <data name="Error_InvalidDirectory" xml:space="preserve">
    <value>The specified directory {0} could not be created or accessed.</value>
    <comment>{0} directory name.</comment>
  </data>
  <data name="Error_OperationTimedOut" xml:space="preserve">
    <value>Operation timed out.</value>
  </data>
  <data name="Error_ProcessListFailedTitle" xml:space="preserve">
    <value>Failed to list processes.</value>
  </data>
  <data name="Error_ProcFSError" xml:space="preserve">
    <value>Parsing '/proc' for process list failed. 
Error:
'{0}'</value>
    <comment>{0} = Output from command</comment>
  </data>
  <data name="Error_PSErrorFormat" xml:space="preserve">
    <value>'ps' command failed with exit code '{0}'. 
Error:
'{1}'</value>
    <comment>{0} = exit code
{1} = additional output</comment>
  </data>
  <data name="Error_PSFailed" xml:space="preserve">
    <value>Unable to obtain process list.</value>
  </data>
  <data name="Error_PSMissing" xml:space="preserve">
    <value>'ps' command missing.</value>
  </data>
  <data name="Error_ShellNotRunning" xml:space="preserve">
    <value>Cannot process command. Connection is not open.</value>
  </data>
  <data name="Error_SourceFileNotFound" xml:space="preserve">
    <value>Source file '{0}' not found</value>
    <comment>{0} file</comment>
  </data>
  <data name="HeaderTextFormat" xml:space="preserve">
    <value>Enter credentials to connect to {0}</value>
    <comment>{0} is the network address being connected to</comment>
  </data>
  <data name="HostName_PlaceHolder" xml:space="preserve">
    <value>&lt;hostname&gt;</value>
  </data>
  <data name="ProcessName_Unknown" xml:space="preserve">
    <value>&lt;unknown&gt;</value>
    <comment>Placeholder for unable to determine process name</comment>
  </data>
  <data name="SSH_PSDescription" xml:space="preserve">
    <value>SSH (Secure Shell) Transport allows connecting Visual Studio to computers running an SSH server with a bash-like shell (ex: Linux, macOS, etc).</value>
  </data>
  <data name="UserName_PlaceHolder" xml:space="preserve">
    <value>&lt;username&gt;</value>
  </data>
  <data name="WaitingOp_Connecting" xml:space="preserve">
    <value>Connecting to {0}...</value>
    <comment>{0} is the network address being connected to</comment>
  </data>
  <data name="WaitingOp_ExecutingCommand" xml:space="preserve">
    <value>Running command '{0}' on the remote system...</value>
    <comment>{0} is the command description.</comment>
  </data>
  <data name="WaitingOp_ExecutingPS" xml:space="preserve">
    <value>Running ps on the remote system...</value>
  </data>
  <data name="WaitingOp_HomeDirectory" xml:space="preserve">
    <value>Obtaining user's home directory path from remote system...</value>
  </data>
  <data name="WaitingOp_MakeDirectory" xml:space="preserve">
    <value>Creating directory on remote system...</value>
  </data>
</root>