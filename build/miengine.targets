<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--NOTE: this code was borrowed from Roslyn. See http://index/#MSBuildItem=AssemblyVersionAttribute or C\R\Main\Open\Tools\Microsoft.CodeAnalysis.Toolset.Open\Targets\GenerateAssemblyInfo.targets -->
  <PropertyGroup>
    <GeneratedAssemblyInfoFile>$(IntermediateOutputPath)GeneratedAssemblyInfo$(DefaultLanguageSourceExtension)</GeneratedAssemblyInfoFile>
  </PropertyGroup>

  <PropertyGroup>
    <CoreCompileDependsOn>GenerateAssemblyInfoFile;$(CoreCompileDependsOn)</CoreCompileDependsOn>
    <BuildDependsOn Condition="'$(IsCoreClr)' == 'false'">DetermineCompilerBinary;$(BuildDependsOn)</BuildDependsOn>
    <BuildDependsOn>$(BuildDependsOn);GenerateMonoSymbols</BuildDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="GetRuntime" 
             TaskFactory="CodeTaskFactory" 
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <IsMonoRuntime ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        IsMonoRuntime = System.Type.GetType("Mono.Runtime") != null;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="DetermineCompilerBinary">
    <GetRuntime>
      <Output PropertyName="IsMonoRuntime" TaskParameter="IsMonoRuntime" />
    </GetRuntime>

    <Exec Condition="'$(IsMonoRuntime)' == 'true'"
          ConsoleToMsBuild="true"
          Command="dirname `which mcs`">
      <Output TaskParameter="ConsoleOutput" PropertyName="McsPath" />
    </Exec>

    <PropertyGroup Condition="'$(IsMonoRuntime)' == 'true'">
      <!-- If we're running on Mono, Roslyn will fail to sign the binaries, so use mcs instead -->      
      <CscToolExe>mcs</CscToolExe>
      <CscToolPath>$(McsPath)/</CscToolPath>
    </PropertyGroup>
  </Target>
  
  <Target Name="RestoreDesktopPackages">
      <!-- Restore from packages.config instead of project.json when building for desktop -->
    <Exec Condition="'$(IsCoreClr)' == 'false'" 
          Command="&quot;$(MIEngineRoot)tools/NuGet/NuGet.exe&quot; restore -PackagesDirectory &quot;$(NuGetPackagesDirectory)&quot; &quot;$(ProjectDir)packages.config&quot; -ConfigFile &quot;$(MIEngineRoot)src\.nuget\NuGet.Config&quot;" />
  </Target>

  <Target Name="GenerateMonoSymbols"
          Condition="'$(IsCoreClr)' == 'false' AND '$(IsMonoRuntime)' == 'false' AND '$(ShouldGenerateMonoSymbols)' == 'true'">
    <!-- If we're building the Desktop config on Windows, run pdb2mdb to generate Mono symbols as well -->
    <Exec Command="&quot;$(NugetPackagesDirectory)\Mono.Unofficial.pdb2mdb.4.2.3.4\tools\pdb2mdb.exe&quot; &quot;$(TargetPath)&quot;" />
  </Target>

  <Target Name="GlassDirCopy" Condition="'@(GlassDirCopy)' != ''" AfterTargets="Build">
    <MakeDir Condition="!Exists($(GlassDir))" Directories="$(GlassDir)" />
    <Copy SourceFiles="@(GlassDirCopy)" DestinationFolder="$(GlassDir)" />
  </Target>

  <!-- Depends on PrepareForBuild because the latter is responsible for calling MakeDir(IntermediateOutputPath). 
  Without it, if we do a design-time build of a project (e.g. in Workspace.LoadSolution) immediately following
  a tfpt treeclean, WriteCodeFragment may fail because the obj folder doesn't even exist at that time.  -->
  <Target Name="GenerateAssemblyInfoFile"
          Inputs="$(MSBuildThisFileFullPath)"
          Outputs="$(GeneratedAssemblyInfoFile)"
          DependsOnTargets="PrepareForBuild"
          Condition="'$(Language)' == 'C#' or '$(Language)' == 'VB'">

    <Error Condition="'$(BuildVersion)'==''" Text="'BuildVersion' is not defined. Try rebuilding clean. If the problem presists, make sure gdb.settings.targets is included in this project."/>
    <Error Condition="'$(AssemblyVersion)'==''" Text="'AssemblyVersion' is not defined. Try rebuilding clean. If the problem presists, make sure gdb.settings.targets is included in this project."/>

    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyCompanyAttribute">
        <_Parameter1>Microsoft Corporation</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyProductAttribute">
        <_Parameter1>Microsoft ® Visual Studio ®</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyCopyrightAttribute">
        <_Parameter1>© Microsoft Corporation. All rights reserved.</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyVersionAttribute">
        <_Parameter1>$(AssemblyVersion)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyFileVersionAttribute">
        <_Parameter1>$(BuildVersion)</_Parameter1>
      </AssemblyAttribute>
      <AssemblyAttribute Include="System.Reflection.AssemblyInformationalVersionAttribute">
        <_Parameter1>$(BuildVersionExtended)</_Parameter1>
      </AssemblyAttribute>
    </ItemGroup>

    <WriteCodeFragment AssemblyAttributes="@(AssemblyAttribute)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedAssemblyInfoFile)">
      <Output TaskParameter="OutputFile" ItemName="Compile" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>
  </Target>
  
  <!-- Source Link -->
  <PropertyGroup Condition="'$(EnableSourceLink)' == 'true' and '$(BUILD_SOURCEVERSION)' != ''">
    <SourceLink>$(IntermediateOutputPath)SourceLink.json</SourceLink>
  </PropertyGroup>
  
  <Target Name="CreateSourceLinkJson"
          Condition="'$(SourceLink)' != ''"
          BeforeTargets="CoreCompile">
    <PropertyGroup>
      <EscapedRepositoryRoot>$(MIEngineRoot.Replace("\", "\\"))</EscapedRepositoryRoot>
      <SourceLinkDir>$([System.IO.Path]::GetDirectoryName('$(SourceLink)'))</SourceLinkDir>
      
      <JsonString>
{
  "documents": {
    "$(EscapedRepositoryRoot)*": "https://raw.githubusercontent.com/Microsoft/MIEngine/$(BUILD_SOURCEVERSION)/*"
  }
}
      </JsonString>
    </PropertyGroup>

    <MakeDir Condition="!Exists('$(SourceLinkDir)')" Directories="$(SourceLinkDir)"/>
    <WriteLinesToFile File="$(SourceLink)" Lines="$(JsonString)" Overwrite="true"/>
  </Target>
</Project>
